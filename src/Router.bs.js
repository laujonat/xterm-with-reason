// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";

function urlToUrlList(url) {
  switch (url) {
    case "" : 
    case "/" : 
        return /* [] */0;
    default:
      var raw = url.slice(1);
      var match = raw[raw.length - 1 | 0];
      var raw$1 = match === "/" ? raw.slice(0, -1) : raw;
      return $$Array.to_list(raw$1.split("/"));
  }
}

var component = ReasonReact.reducerComponent("Router");

function make(initialUrl, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var watcherID = ReasonReactRouter.watchUrl((function (url) {
                      return Curry._1(self[/* send */3], /* UpdateRoute */[url]);
                    }));
              return Curry._1(self[/* onUnmount */4], (function (param) {
                            return ReasonReactRouter.unwatchUrl(watcherID);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              return Curry._1(children, param[/* state */1]);
            }),
          /* initialState */(function (param) {
              if (initialUrl !== undefined) {
                return /* record */[
                        /* path */urlToUrlList(initialUrl),
                        /* hash */"",
                        /* search */""
                      ];
              } else {
                return ReasonReactRouter.dangerouslyGetInitialUrl(/* () */0);
              }
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              return /* Update */Block.__(0, [action[0]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

export {
  urlToUrlList ,
  component ,
  make ,
  
}
/* component Not a pure module */
